{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the Social Streamliner application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user.",
          "format": "uuid"
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the user account was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "email",
        "createdAt"
      ]
    },
    "SocialAccount": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SocialAccount",
      "type": "object",
      "description": "Represents a social media account (e.g., Facebook, Instagram) connected by a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the social media account.",
          "format": "uuid"
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User who owns this social media account. (Relationship: User 1:N SocialAccount)"
        },
        "platform": {
          "type": "string",
          "description": "The social media platform (e.g., 'Facebook', 'Instagram')."
        },
        "accountId": {
          "type": "string",
          "description": "The unique identifier for the account on the social media platform."
        },
        "displayName": {
          "type": "string",
          "description": "The display name of the account on the social media platform."
        },
        "appId": {
          "type": "string",
          "description": "The App ID for the social media application."
        },
        "appSecret": {
          "type": "string",
          "description": "The App Secret for the social media application."
        }
      },
      "required": [
        "id",
        "userId",
        "platform",
        "accountId",
        "displayName",
        "appId",
        "appSecret"
      ]
    },
    "ScheduledPost": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ScheduledPost",
      "type": "object",
      "description": "Represents a post scheduled to be published on one or more social media accounts.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the scheduled post.",
          "format": "uuid"
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User who created this scheduled post. (Relationship: User 1:N ScheduledPost)"
        },
        "content": {
          "type": "string",
          "description": "The content of the post."
        },
        "scheduledTime": {
          "type": "string",
          "description": "The date and time when the post is scheduled to be published.",
          "format": "date-time"
        },
        "socialAccountIds": {
          "type": "array",
          "description": "References to SocialAccounts where this post will be published. (Relationship: SocialAccount N:N ScheduledPost)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "userId",
        "content",
        "scheduledTime",
        "socialAccountIds"
      ]
    },
    "TrendingHashtag": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TrendingHashtag",
      "type": "object",
      "description": "Represents trending hashtags for content aggregation.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the trending hashtag.",
          "format": "uuid"
        },
        "hashtag": {
          "type": "string",
          "description": "The trending hashtag text."
        },
        "volume": {
          "type": "number",
          "description": "The search volume or usage frequency of the hashtag."
        },
        "dateObserved": {
          "type": "string",
          "description": "The date when the hashtag was observed as trending.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "hashtag",
        "volume",
        "dateObserved"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile information.  Path-based ownership ensures only the user can access their data.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/socialAccounts/{socialAccountId}",
        "definition": {
          "entityName": "SocialAccount",
          "schema": {
            "$ref": "#/backend/entities/SocialAccount"
          },
          "description": "Stores social media account information for a user. Includes denormalized 'userId' for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "socialAccountId",
              "description": "The unique identifier of the social media account."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/scheduledPosts/{scheduledPostId}",
        "definition": {
          "entityName": "ScheduledPost",
          "schema": {
            "$ref": "#/backend/entities/ScheduledPost"
          },
          "description": "Stores scheduled posts for a user. Includes denormalized 'userId' for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "scheduledPostId",
              "description": "The unique identifier of the scheduled post."
            }
          ]
        }
      },
      {
        "path": "/trendingHashtags/{trendingHashtagId}",
        "definition": {
          "entityName": "TrendingHashtag",
          "schema": {
            "$ref": "#/backend/entities/TrendingHashtag"
          },
          "description": "Stores trending hashtags for content aggregation. Globally readable.",
          "params": [
            {
              "name": "trendingHashtagId",
              "description": "The unique identifier of the trending hashtag."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure authorization independence, support secure list operations (QAPs), and maintain data integrity. It leverages denormalization and structural segregation to achieve these goals.\n\n*   **Users:** User data is stored in `/users/{userId}`. This path-based ownership ensures only the user can access their data.\n*   **Social Accounts:** Social accounts, owned by users, are stored in `/users/{userId}/socialAccounts/{socialAccountId}`. This maintains the 1:N relationship between users and their social accounts. The `apiKey` for each social account is stored here, ensuring only the user who owns the account can access it.\n*   **Scheduled Posts:** Scheduled posts are stored in `/users/{userId}/scheduledPosts/{scheduledPostId}`.  This structure clearly associates each post with its owner. The `socialAccountIds` field allows linking to multiple social accounts. Crucially, the `userId` field is duplicated within the `ScheduledPost` document itself, ensuring Authorization Independence. This is vital for security rules because it avoids needing to perform a `get()` operation to verify the user's ID from a parent document when creating or modifying a `ScheduledPost`.\n*   **Trending Hashtags:** Trending hashtags are stored in the `/trendingHashtags/{trendingHashtagId}` collection.  These are globally accessible (readable). No user-specific access controls are applied.\n\n**Authorization Independence:**\nThe key to authorization independence is the duplication of the `userId` in the `SocialAccount` and `ScheduledPost` documents.  This denormalization allows security rules to validate ownership without needing to read parent documents. For instance, when a user creates a new `ScheduledPost`, the rule can directly check `request.auth.uid == resource.data.userId` without needing to fetch the user document.\n\n**QAPs (Rules are not Filters):**\nThe structure supports secure `list` operations by using path-based ownership for user-specific data and a separate collection for globally trending hashtags. This segregation ensures that listing operations can be scoped to a user's data or to the global trending hashtags, preventing unauthorized access.\n\nThis structure facilitates simple, robust, and easily debuggable security rules by prioritizing authorization independence and structural segregation."
  }
}