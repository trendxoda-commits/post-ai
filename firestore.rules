/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user-specific data while allowing public read access to trending hashtags.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/apiCredentials/{credentialId}: Stores API credentials.
 * - /users/{userId}/socialAccounts/{socialAccountId}: Stores social media account information.
 * - /users/{userId}/scheduledPosts/{scheduledPostId}: Stores scheduled posts.
 * - /trendingHashtags/{trendingHashtagId}: Stores trending hashtags.
 *
 * Key Security Decisions:
 * - User data (profiles, API credentials, social accounts, scheduled posts) is strictly controlled by the owning user.
 * - Users can only access their own data; cross-user access is denied.
 * - Listing of user-specific subcollections is allowed only for the owner.
 * - Trending hashtags are publicly readable but not writable by clients.
 *
 * Denormalization for Authorization:
 * - The `userId` is encoded directly in the path for user-owned documents, simplifying ownership checks.
 * - The `userId` field within the documents in the /users/{userId} collection must match the {userId} segment of the path to prevent unauthorized data access or modification.
 *
 * Structural Segregation:
 * - Public data (trending hashtags) is stored in a separate top-level collection, distinct from private user data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by the authenticated user.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user owns the existing document.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {bool} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with UID 'user123' can create a document where userId is 'user123'.
     * @allow (get, list, update, delete) - Authenticated user with UID 'user123' can read, update, or delete their own user document where userId is 'user123'.
     * @deny (create) - Authenticated user with UID 'user123' cannot create a document where userId is 'user456'.
     * @deny (get, list, update, delete) - Authenticated user with UID 'user123' cannot read, update, or delete a user document where userId is 'user456'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is disallowed.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; //Enforce immutability
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/apiCredentials/{credentialId} collection.
     * @path /users/{userId}/apiCredentials/{credentialId}
     * @allow (create) - Authenticated user with UID 'user123' can create an API credential under their user document.
     * @allow (get, list, update, delete) - Authenticated user with UID 'user123' can read, update, or delete their own API credentials.
     * @deny (create) - Authenticated user with UID 'user123' cannot create an API credential under another user's document (userId 'user456').
     * @deny (get, list, update, delete) - Authenticated user with UID 'user123' cannot read, update, or delete API credentials belonging to another user (userId 'user456').
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId}/apiCredentials/{credentialId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId; //Enforce immutability
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/socialAccounts/{socialAccountId} collection.
     * @path /users/{userId}/socialAccounts/{socialAccountId}
     * @allow (create) - Authenticated user with UID 'user123' can create a social account under their user document.
     * @allow (get, list, update, delete) - Authenticated user with UID 'user123' can read, update, or delete their own social accounts.
     * @deny (create) - Authenticated user with UID 'user123' cannot create a social account under another user's document (userId 'user456').
     * @deny (get, list, update, delete) - Authenticated user with UID 'user123' cannot read, update, or delete social accounts belonging to another user (userId 'user456').
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId}/socialAccounts/{socialAccountId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId; //Enforce immutability
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/scheduledPosts/{scheduledPostId} collection.
     * @path /users/{userId}/scheduledPosts/{scheduledPostId}
     * @allow (create) - Authenticated user with UID 'user123' can create a scheduled post under their user document.
     * @allow (get, list, update, delete) - Authenticated user with UID 'user123' can read, update, or delete their own scheduled posts.
     * @deny (create) - Authenticated user with UID 'user123' cannot create a scheduled post under another user's document (userId 'user456').
     * @deny (get, list, update, delete) - Authenticated user with UID 'user123' cannot read, update, or delete scheduled posts belonging to another user (userId 'user456').
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId}/scheduledPosts/{scheduledPostId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId; //Enforce immutability
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /trendingHashtags/{trendingHashtagId} collection.
     * @path /trendingHashtags/{trendingHashtagId}
     * @allow (get, list) - Any user can read trending hashtags.
     * @deny (create, update, delete) - No client-side creation, updates, or deletion of trending hashtags.
     * @principle Allows public read access while restricting writes to authorized sources.
     */
    match /trendingHashtags/{trendingHashtagId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}