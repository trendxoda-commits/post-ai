/**
 * @fileoverview Firestore Security Rules for Social Streamliner.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-related data
 * and allows public read access to trending hashtags.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user.
 * - /users/{userId}/apiCredentials/{credentialId}: Stores API credentials, accessible only by the user.
 * - /users/{userId}/socialAccounts/{socialAccountId}: Stores social media accounts, accessible only by the user.
 * - /users/{userId}/scheduledPosts/{scheduledPostId}: Stores scheduled posts, accessible only by the user.
 * - /trendingHashtags/{trendingHashtagId}: Stores trending hashtags, publicly readable.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Trending hashtags are publicly readable.
 * - User listing is disallowed.
 *
 * Denormalization for Authorization:
 * - User ownership is enforced through path-based rules (e.g., /users/{userId}).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-level access control for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' creates their profile.
     *   `request.auth.uid == 'user123'`
     *   `request.resource.data.id == 'user123'`
     * @allow (get, update, delete) - User with ID 'user123' reads/modifies their own profile.
     *   `request.auth.uid == 'user123'`
     * @deny (create) - User with ID 'user456' attempts to create a profile for 'user123'.
     *   `request.auth.uid == 'user456'`
     *   `request.resource.data.id == 'user123'`
     * @deny (get, update, delete) - User with ID 'user456' attempts to read/modify profile 'user123'.
     *   `request.auth.uid == 'user456'`
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-level access control for API credentials.
     * @path /users/{userId}/apiCredentials/{credentialId}
     * @allow (create) - User 'user123' creates their API credential.
     *   `request.auth.uid == 'user123'`
     *   `request.resource.data.userId == 'user123'`
     * @allow (get, update, delete) - User 'user123' reads/modifies their own API credential.
     *   `request.auth.uid == 'user123'`
     * @deny (create) - User 'user456' attempts to create an API credential for user 'user123'.
     *   `request.auth.uid == 'user456'`
     *   `request.resource.data.userId == 'user123'`
     * @deny (get, update, delete) - User 'user456' attempts to read/modify user 'user123's API credential.
     *   `request.auth.uid == 'user456'`
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/apiCredentials/{credentialId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-level access control for social accounts.
     * @path /users/{userId}/socialAccounts/{socialAccountId}
     * @allow (create) - User 'user123' creates a social account.
     *   `request.auth.uid == 'user123'`
     *   `request.resource.data.userId == 'user123'`
     * @allow (get, update, delete) - User 'user123' reads/modifies their own social account.
     *   `request.auth.uid == 'user123'`
     * @deny (create) - User 'user456' attempts to create a social account for user 'user123'.
     *   `request.auth.uid == 'user456'`
     *   `request.resource.data.userId == 'user123'`
     * @deny (get, update, delete) - User 'user456' attempts to read/modify user 'user123's social account.
     *   `request.auth.uid == 'user456'`
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/socialAccounts/{socialAccountId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-level access control for scheduled posts.
     * @path /users/{userId}/scheduledPosts/{scheduledPostId}
     * @allow (create) - User 'user123' creates a scheduled post.
     *   `request.auth.uid == 'user123'`
     *   `request.resource.data.userId == 'user123'`
     * @allow (get, update, delete) - User 'user123' reads/modifies their own scheduled post.
     *   `request.auth.uid == 'user123'`
     * @deny (create) - User 'user456' attempts to create a scheduled post for user 'user123'.
     *   `request.auth.uid == 'user456'`
     *   `request.resource.data.userId == 'user123'`
     * @deny (get, update, delete) - User 'user456' attempts to read/modify user 'user123's scheduled post.
     *   `request.auth.uid == 'user456'`
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/scheduledPosts/{scheduledPostId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to trending hashtags.
     * @path /trendingHashtags/{trendingHashtagId}
     * @allow (get, list) - Any user can read trending hashtags.
     * @deny (create, update, delete) - No user can create, update, or delete trending hashtags.
     * @principle Allows public read access with restricted write access.
     */
    match /trendingHashtags/{trendingHashtagId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}